import React, { useContext, useMemo, useState, useEffect } from "react";
import styles from "./Event.module.css";
import { AuthContext } from "../AuthContext";
import { useLocation, useParams } from "react-router-dom";

const stubAvatar =
  "data:image/svg+xml;utf8," +
  encodeURIComponent(
    `<svg xmlns='http://www.w3.org/2000/svg' width='120' height='120'>
       <rect fill='#303030' width='100%' height='100%'/>
       <text x='50%' y='52%' dominant-baseline='middle' text-anchor='middle'
             fill='#ff6f00' font-family='Arial' font-size='42'>üòº</text>
     </svg>`
  );

export default function Game({
  tournament: tournamentProp,
  participants: participantsProp,
  initialTeams,
}) {
  const { isAdmin, user } = useContext(AuthContext) ?? { isAdmin: false, user: null };
  const currentUserId = user?.id ?? null;
  const { evenId } = useParams(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ evenId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ URL –∫–∞–∫ /event/:evenId

  const location = useLocation();

  useEffect(() => {
    window.scrollTo(0, 0);
  }, [location.pathname]);

  // State –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
  const [tournament, setTournament] = useState(tournamentProp || {});
  const [participants, setParticipants] = useState(participantsProp || []);
  const [teams, setTeams] = useState(initialTeams || []);
  const [detailedStatsData, setDetailedStatsData] = useState([]);
  const [detailedStatsCurrentPage, setDetailedStatsCurrentPage] = useState(1);
  const [detailedStatsTotalPages, setDetailedStatsTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–±—ã—Ç–∏—é
  
  useEffect(() => {
    if (!evenId) return;

    setLoading(true);
    fetch(`http://localhost:8000/getEvent/${evenId}`)
      .then((res) => {
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è");
        return res.json();
      })
      .then((data) => {
        setTournament(data);
        setParticipants(data.participants || []);
        setTeams(data.teams || []);
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞:", err);
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      })
      .finally(() => setLoading(false));
  }, [evenId]);


  const teamSize = useMemo(() => {
    if (tournament.type === "pair") return 2;
    if (tournament.type === "team") return 5;
    return 1;
  }, [tournament.type]);

  const assignedIds = new Set(teams.flatMap((t) => t.members.map(m => m.id)));
  const freeParticipants = participants.filter((p) => !assignedIds.has(p.id));

  /* —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è */
  const [teamName, setTeamName] = useState("");
  const [selectedIds, setSelectedIds] = useState([]);
  const toggleMember = (id) =>
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );

  /* --- –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã/–ø–∞—Ä—ã --- */
  const mustIncludeSelf = !isAdmin && !!currentUserId;
  const includeSelfOk = !mustIncludeSelf || selectedIds.includes(currentUserId);

  const minTeamForTeamType = Math.ceil(teamSize / 2); // ¬´–ø–æ–ª–æ–≤–∏–Ω–∞¬ª —Å–æ—Å—Ç–∞–≤–∞
  const sizeOk =
    tournament.type === "pair"
      ? selectedIds.length === 2
      : tournament.type === "team"
      ? selectedIds.length === teamSize ||
        selectedIds.length === minTeamForTeamType
      : selectedIds.length >= 1;

  const nameOk = teamName.trim().length > 0;

  const canCreateTeam = isAdmin
    ? nameOk && selectedIds.length >= 2 && selectedIds.length <= teamSize
    : nameOk && includeSelfOk && sizeOk;

  const createTeam = () => {
    if (!canCreateTeam) return;
    setTeams((prev) => [
      ...prev,
      {
        id: `team_${Date.now()}`,
        name: teamName.trim(),
        members: selectedIds.map(id => ({ id, nick: participants.find(p => p.id === id)?.nick || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" })),
      },
    ]);
    setTeamName("");
    setSelectedIds([]);
  };

  const deleteTeam = (id) => {
    if (!isAdmin) return;
    setTeams((prev) => prev.filter((t) => t.id !== id));
  };

  const PAGE_SIZE = 10;
  const handleDetailedStatsPageChange = (p) =>
    setDetailedStatsCurrentPage(
      Math.min(Math.max(1, p), detailedStatsTotalPages)
    );

  /* ===== –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===== */
  const [activeTab, setActiveTab] = useState(1);

  if (loading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>; // –ü—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  }

  return (
    <section className={styles.pageWrap}>
      {/* ===== –≤–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ ===== */}
      <header className={styles.header}>
        <h1 className={styles.title}>{tournament.title}</h1>
      </header>

      <div className={styles.topGrid}>
        {/* –ª–µ–≤–∞—è –∑–æ–Ω–∞ */}
        <div className={styles.infoGrid}>
          <div className={styles.infoCard}>
            <div className={styles.caption}>–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</div>
            <div className={styles.value}>{tournament.dates}</div>
          </div>
          <div className={styles.infoCard}>
            <div className={styles.caption}>–ú–µ—Å—Ç–æ</div>
            <div className={styles.value}>{tournament.location}</div>
          </div>
          <div className={styles.infoCard}>
            <div className={styles.caption}>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞</div>
            <div className={styles.value}>
              {tournament.type === "solo"
                ? "–õ–∏—á–Ω—ã–π"
                : tournament.type === "pair"
                ? "–ü–∞—Ä–Ω—ã–π"
                : "–ö–æ–º–∞–Ω–¥–Ω—ã–π"}
            </div>
          </div>
          <div className={styles.infoCard}>
            <div className={styles.caption}>–£—á–∞—Å—Ç–Ω–∏–∫–∏</div>
            <div className={styles.value}>
              {tournament.participantsCount} –∏–∑ {tournament.participantsLimit}
            </div>
          </div>

          <button
            type="button"
            className={styles.discussBtn}
            onClick={() => alert("–û—Ç–∫—Ä—ã—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")}
          >
            üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
          </button>
        </div>

        {/* –ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
        <aside className={styles.rightCol}>
          <div className={styles.personCard}>
            <img
              src={tournament.gs?.avatar || stubAvatar}
              alt={tournament.gs?.name}
              className={styles.avatar}
            />
            <div className={styles.personMeta}>
              <div className={styles.personName}>{tournament.gs?.name}</div>
              <div className={styles.personRole}>{tournament.gs?.role}</div>
            </div>
          </div>

          <div className={styles.personCard}>
            <img
              src={tournament.org?.avatar || stubAvatar}
              alt={tournament.org?.name}
              className={styles.avatar}
            />
            <div className={styles.personMeta}>
              <div className={styles.personName}>{tournament.org?.name}</div>
              <div className={styles.personRole}>{tournament.org?.role}</div>
            </div>
          </div>

          <div className={styles.feeCard}>
            <div className={styles.caption}>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è</div>
            <div className={styles.fee}>
              {tournament.fee?.toLocaleString()} {tournament.currency}
            </div>
            <button
              type="button"
              className={styles.primaryBtn}
              onClick={() => alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")}
            >
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
          </div>
        </aside>
      </div>

      {/* ===== —É—á–∞—Å—Ç–Ω–∏–∫–∏ ===== */}
      <section className={styles.qualifiedWrap}>
        <h2 className={styles.h2}>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h2>
        {participants.length === 0 ? (
          <div className={styles.emptyHint}>–¢—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º!</div>
        ) : (
          <div className={styles.qualifiedGrid}>
            {participants.map((p) => (
              <div className={styles.qualifiedCard} key={p.id}>
                <img
                  src={p.avatar || stubAvatar}
                  className={styles.qualifiedAvatar}
                  alt={p.nick}
                />
                <div className={styles.qualifiedNick}>{p.nick}</div>
                <div className={styles.qualifiedFrom}>{p.club || "‚Äî"}</div>
              </div>
            ))}
          </div>
        )}
      </section>

      {/* ===== –∫–æ–º–∞–Ω–¥—ã/–ø–∞—Ä—ã ===== */}
      {(tournament.type === "pair" || tournament.type === "team") && (
        <section className={styles.teamsWrap}>
          <h2 className={styles.h2}>
            {tournament.type === "pair" ? "–ü–∞—Ä—ã" : "–ö–æ–º–∞–Ω–¥—ã"}
          </h2>

          {/* –§–æ—Ä–º–∞ */}
          <div className={styles.teamForm}>
            <div className={styles.formRow}>
              <label className={styles.formLabel}>
                –ù–∞–∑–≤–∞–Ω–∏–µ {tournament.type === "pair" ? "–ø–∞—Ä—ã" : "–∫–æ–º–∞–Ω–¥—ã"}
              </label>
              <input
                className={styles.input}
                value={teamName}
                onChange={(e) => setTeamName(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: FrostBite"
              />
            </div>

            <div className={styles.formRow}>
              <div className={styles.formLabel}>
                –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({selectedIds.length}
                {tournament.type === "pair"
                  ? "/2"
                  : `/${teamSize} (–º–∏–Ω–∏–º—É–º ${Math.ceil(teamSize / 2)})`}
                )
              </div>
              <div className={styles.membersPool}>
                {freeParticipants.length === 0 && (
                  <div className={styles.emptyHintSmall}>
                    –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.
                  </div>
                )}
                {freeParticipants.map((p) => (
                  <button
                    key={p.id}
                    type="button"
                    className={
                      selectedIds.includes(p.id)
                        ? styles.memberBtnSelected
                        : styles.memberBtn
                    }
                    onClick={() => toggleMember(p.id)}
                  >
                    <img
                      alt={p.nick}
                      src={p.avatar || stubAvatar}
                      className={styles.memberAvatar}
                    />
                    <span>{p.nick}</span>
                  </button>
                ))}
              </div>
            </div>

            <button
              type="button"
              className={
                canCreateTeam ? styles.primaryBtn : styles.primaryBtnDisabled
              }
              disabled={!canCreateTeam}
              onClick={createTeam}
            >
              –°–æ–∑–¥–∞—Ç—å {tournament.type === "pair" ? "–ø–∞—Ä—É" : "–∫–æ–º–∞–Ω–¥—É"}
            </button>

            {!isAdmin && (
              <div className={styles.hint}>
                –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å{" "}
                {tournament.type === "pair" ? "–ø–∞—Ä—É" : "–∫–æ–º–∞–Ω–¥—É"} —Ç–æ–ª—å–∫–æ —Å
                —É—á–∞—Å—Ç–∏–µ–º —Å–µ–±—è. –î–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –º–∏–Ω–∏–º—É–º
                –ø–æ–ª–æ–≤–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–∞.
              </div>
            )}
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥/–ø–∞—Ä (–ø–æ–¥ —Ñ–æ—Ä–º–æ–π) */}
          <div className={styles.teamsList}>
            {teams.length === 0 ? (
              <div className={styles.emptyHint}>
                {tournament.type === "pair"
                  ? "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä."
                  : "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."}
              </div>
            ) : (
              teams.map((t) => (
                <div className={styles.teamCard} key={t.id}>
                  <div className={styles.teamHeader}>
                    <div className={styles.teamName}>{t.name}</div>
                    {isAdmin && (
                      <button
                        type="button"
                        className={styles.deleteBtn}
                        onClick={() => deleteTeam(t.id)}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    )}
                  </div>
                  <div className={styles.teamMembers}>
                    {t.members.map((m) => (
                      <div className={styles.teamMember} key={m.id}>
                        <img
                          src={participants.find(p => p.id === m.id)?.avatar || stubAvatar}
                          alt={m.nick}
                          className={styles.memberAvatar}
                        />
                        <span>{m.nick}</span>
                      </div>
                    ))}
                  </div>
                </div>
              ))
            )}
          </div>
        </section>
      )}

      {/* ===== –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–≤–∫–ª–∞–¥–∫–∏) ===== */}
      <section className={styles.resultsWrap}>
        <div className={styles.tabs}>
          {["–ò–≥—Ä—ã", "–õ–∏—á–Ω—ã–π –∑–∞—á—ë—Ç", "–ö–æ–º–∞–Ω–¥–Ω—ã–π –∑–∞—á—ë—Ç"].map((t, i) => (
            <button
              key={t}
              type="button"
              className={i === activeTab ? styles.tabActive : styles.tab}
              onClick={() => setActiveTab(i)}
            >
              {t}
            </button>
          ))}
        </div>

        <div className={styles.tabPanel}>
          {/* –ò–≥—Ä—ã ‚Äî –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä */}
          {activeTab === 0 && (
            <div className={styles.placeholder}>
              –¢–∞–±–ª–∏—Ü–∞ ¬´–ò–≥—Ä—ã¬ª –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å
            </div>
          )}

          {/* –õ–∏—á–Ω—ã–π –∑–∞—á—ë—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü–∞ */}
          {activeTab === 1 && (
            <div className={styles.tableOnly}>
              <DetailedStatsTable
                data={detailedStatsData.slice((detailedStatsCurrentPage - 1) * PAGE_SIZE, detailedStatsCurrentPage * PAGE_SIZE)}
                currentPage={detailedStatsCurrentPage}
                totalPages={detailedStatsTotalPages}
                onPageChange={handleDetailedStatsPageChange}
                user={user}
              />
            </div>
          )}

          {/* –ö–æ–º–∞–Ω–¥–Ω—ã–π –∑–∞—á—ë—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä */}
          {activeTab === 2 && (
            <div className={styles.tableWrapper}>
              <table
                className={styles.detailedStatsTable}
                aria-label="–ö–æ–º–∞–Ω–¥–Ω—ã–π –∑–∞—á—ë—Ç"
              >
                <thead>
                  <tr>
                    <th>–ú–µ—Å—Ç–æ</th>
                    <th>{tournament.type === "pair" ? "–ü–∞—Ä–∞" : "–ö–æ–º–∞–Ω–¥–∞"}</th>
                    <th>–û—á–∫–∏</th>
                  </tr>
                </thead>
                <tbody>
                  {teams.length === 0 ? (
                    <tr>
                      <td colSpan={3} style={{ textAlign: "center", color: "#bbb" }}>
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                      </td>
                    </tr>
                  ) : (
                    teams.map((t, idx) => (
                      <tr key={t.id}>
                        <td>{idx + 1}</td>
                        <td>{t.name}</td>
                        <td>0</td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </section>
    </section>
  );
}

/* =========================
   –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
   ========================= */
function DetailedStatsTable({ data, currentPage, totalPages, onPageChange, user }) {
  const roleCell = (wins = 0, games = 0, plusArr = []) => {
    const g = games || 0;
    const w = wins || 0;
    const pct = g ? Math.round((w / g) * 100) : 0;
    const sum = (plusArr || []).reduce((a, b) => a + b, 0);
    const max = (plusArr || []).length ? Math.max(...plusArr) : 0;
    const tip = `–ü–æ–±–µ–¥—ã: ${w}/${g} (${pct}%) ‚Ä¢ –î–æ–ø: ${sum.toFixed(2)} ‚Ä¢ –ú–∞–∫—Å: ${max.toFixed(2)}`;
    return <span title={tip}>{w}/{g} ({pct}%)</span>;
  };

  const cardsCell = (plusArr = []) => {
    const total = plusArr.reduce((a, b) => a + b, 0);
    return <span className={styles.num}>{total.toFixed(2)}</span>;
  };

  return (
    <>
      <div className={styles.tableWrapper}>
        <table className={styles.detailedStatsTable}>
          <colgroup>
            <col className={styles.colRank} />
            <col className={styles.colPlayer} />
            <col className={styles.colShort} />
            <col className={styles.colTiny} />
            <col className={styles.colTiny} />
            <col className={styles.colTiny} />
            <col className={styles.colTiny} />
            <col className={styles.colShort} />
            <col className={styles.colTiny} />
            <col className={styles.colTiny} />
            <col className={styles.colWide} />
            <col className={styles.colWide} />
            <col className={styles.colWide} />
            <col className={styles.colWide} />
            <col className={styles.colWide} />
          </colgroup>
          <thead>
            <tr>
              <th className={`${styles.stickyCol1} ${styles.center}`}>#</th>
              <th className={styles.stickyCol2}>–ò–≥—Ä–æ–∫</th>
              <th className={styles.center}>Œ£</th>
              <th className={styles.center}>1üèÜ</th>
              <th className={styles.center}>–°–ö</th>
              <th className={styles.center}>–ñ–ö</th>
              <th className={styles.center}>–õ–•</th>
              <th className={styles.center}>–î–æ–ø—ã</th>
              <th className={styles.center}>Ci</th>
              <th className={styles.center}>‚àí</th>
              <th className={styles.center}>–û–±—â–∞—è</th>
              <th className={styles.center}>–®–µ—Ä–∏—Ñ</th>
              <th className={styles.center}>–ú–∏—Ä–Ω.</th>
              <th className={styles.center}>–ú–∞—Ñ–∏—è</th>
              <th className={styles.center}>–î–æ–Ω</th>
            </tr>
          </thead>
          <tbody>
            {Array.isArray(data) &&
              data.map((p, i) => {
                const rank = (currentPage - 1) * 10 + i + 1;

                const totalGames =
                  (p.gamesPlayed?.peaceful || 0) +
                  (p.gamesPlayed?.mafia || 0) +
                  (p.gamesPlayed?.red || 0) +
                  (p.gamesPlayed?.don || 0) +
                  (p.gamesPlayed?.sk || 0) +
                  (p.gamesPlayed?.jk || 0);

                const totalWins =
                  (p.wins?.red || 0) +
                  (p.wins?.peaceful || 0) +
                  (p.wins?.mafia || 0) +
                  (p.wins?.don || 0) +
                  (p.wins?.sk || 0) +
                  (p.wins?.jk || 0);

                const allPlus = Object.values(p.role_plus || {}).flat();

                return (
                  <tr
                    key={p.nickname}
                    className={p.nickname === user?.nickname ? styles.currentUserRow : ""}
                  >
                    <td className={`${styles.stickyCol1} ${styles.center}`}>{rank}</td>
                    <td className={styles.stickyCol2}>
                      <span className={styles.link}>{p.nickname}</span>
                    </td>

                    <td className={`${styles.num} ${styles.center}`}>{(p.totalPoints ?? 0).toFixed(2)}</td>
                    <td className={`${styles.num} ${styles.center}`}>{totalWins}</td>
                    <td className={styles.center}>{cardsCell(p.role_plus?.sk || [])}</td>
                    <td className={styles.center}>{cardsCell(p.role_plus?.jk || [])}</td>
                    <td className={styles.center}>{cardsCell(p.role_plus?.red || [])}</td>
                    <td className={`${styles.num} ${styles.center}`}>{(p.bonuses ?? 0).toFixed(2)}</td>
                    <td className={`${styles.num} ${styles.center}`}>0</td>
                    <td className={`${styles.num} ${styles.center}`}>{(p.penalties ?? 0).toFixed(2)}</td>

                    <td className={styles.center}>{roleCell(totalWins, totalGames, allPlus)}</td>
                    <td className={styles.center}>{roleCell(p.wins?.red, p.gamesPlayed?.red, p.role_plus?.red)}</td>
                    <td className={styles.center}>{roleCell(p.wins?.peaceful, p.gamesPlayed?.peaceful, p.role_plus?.peaceful)}</td>
                    <td className={styles.center}>{roleCell(p.wins?.mafia, p.gamesPlayed?.mafia, p.role_plus?.mafia)}</td>
                    <td className={styles.center}>{roleCell(p.wins?.don, p.gamesPlayed?.don, p.role_plus?.don)}</td>
                  </tr>
                );
              })}
          </tbody>
        </table>
      </div>

      {totalPages > 0 && (
        <nav
          className={`${styles.pagination} ${styles.detailedPagination}`}
          aria-label="–ü–µ–π–¥–∂–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        >
          <button
            onClick={() => onPageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className={`${styles.pageBtn} ${styles.pageArrow}`}
            aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            type="button"
          >
            ‚Äπ
          </button>
          {[...Array(totalPages)].map((_, i) => {
            const p = i + 1;
            const isActive = p === currentPage;
            return (
              <button
                key={p}
                onClick={() => onPageChange(p)}
                className={`${styles.pageBtn} ${isActive ? styles.pageActive : ""}`}
                aria-current={isActive ? "page" : undefined}
                aria-label={`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${p}`}
                type="button"
              >
                {p}
              </button>
            );
          })}
          <button
            onClick={() => onPageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            className={`${styles.pageBtn} ${styles.pageArrow}`}
            aria-label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            type="button"
          >
            ‚Ä∫
          </button>
        </nav>
      )}
    </>
  );
}
