import React, { useEffect, useState, useRef } from 'react';
import CCC_prew from "../EventPrew/Rock.png";
import logo from "../images/CCC.jpg";
import styles from './gameWidget.module.css';
import sheriff from "../images/gameIcon/Sheriff.png";
import Don from "../images/gameIcon/Don.png";
import Golos from "../images/gameIcon/Golos.png";
import Strelba from "../images/gameIcon/Strelba.png";

import OBSWebSocket from 'obs-websocket-js';

const obs = new OBSWebSocket();

async function connectOBS() {
  try {
    await obs.connect("ws://127.0.0.1:4455", "R19022004r"); // –ø–∞—Ä–æ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OBS");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
  }
}

async function switchScene(sceneName) {
  try {
    await obs.call("SetCurrentProgramScene", { sceneName });
    console.log(`üé¨ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å—Ü–µ–Ω—É: ${sceneName}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω—ã:", err);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
connectOBS();
// –ø–æ—Ç–æ–º –≤—ã–∑–æ–≤–∏: switchScene("Game Scene");

const GameWidget = () => {
  const [gameData, setGameData] = useState(null);
  const [eventId, setEventId] = useState(null);
  const [gameId, setGameId] = useState(null);
  const storageKeyRef = useRef(null);

  // === –ò–∑–≤–ª–µ–∫–∞–µ–º eventId –∏ gameId –∏–∑ URL ===
  useEffect(() => {
    const pathParts = window.location.pathname.split('/');
    const event = pathParts.find(p => /^\d+$/.test(p));
    const game = pathParts.find(p => p.startsWith('game_'));

    if (!event || !game) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å eventId –∏–ª–∏ gameId –∏–∑ URL');
      return;
    }

    setEventId(event);
    setGameId(game);

    const storageKey = `gameData-${event}-${game}`;
    storageKeyRef.current = storageKey;

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const rawData = localStorage.getItem(storageKey);
    if (rawData) {
      try {
        setGameData(JSON.parse(rawData));
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ localStorage:', err);
      }
    }

    // === –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage ===
    const handleStorageChange = (e) => {
      if (e.key === storageKey) {
        try {
          const newData = JSON.parse(e.newValue);
          setGameData((prev) => {
            const prevString = JSON.stringify(prev);
            const newString = JSON.stringify(newData);
            if (prevString !== newString) {
              console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ localStorage ‚úÖ');
              return newData;
            }
            return prev;
          });
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', err);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);

    // === –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ ===
    const interval = setInterval(() => {
      const currentRaw = localStorage.getItem(storageKeyRef.current);
      if (currentRaw) {
        try {
          const parsed = JSON.parse(currentRaw);
          setGameData((prev) => {
            const prevString = JSON.stringify(prev);
            const newString = JSON.stringify(parsed);
            if (prevString !== newString) {
              console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (–≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ) ‚úÖ');
              return parsed;
            }
            return prev;
          });
        } catch {}
      }
    }, 2000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    return () => {
      window.removeEventListener('storage', handleStorageChange);
      clearInterval(interval);
    };
  }, []);

  if (!gameData) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã...</div>;
  }

  // === –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ===
  const players = (gameData.players || []).map((p, i) => ({
    id: p.id ?? i + 1,
    name: p.name && p.name.trim() !== '' ? p.name : `–ò–≥—Ä–æ–∫ ${i + 1}`,
    fouls: p.fouls ?? 0,
    role: p.role && p.role.trim() !== '' ? p.role.toLowerCase() : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
  }));

  const activePlayers = players.slice(0, 8);
  const foldedPlayers = players.slice(8);
  const squares = Array.from({ length: 5 });

  // === –¶–≤–µ—Ç–∞ —Ä–æ–ª–µ–π ===
  const getRoleColor = (role) => {
    switch (role) {
      case '–º–∏—Ä–Ω—ã–π': return { background: 'red', color: 'white' };
      case '–º–∞—Ñ–∏—è': return { background: 'black', color: 'white' };
      case '–¥–æ–Ω': return { background: 'gray', color: 'white' };
      case '—à–µ—Ä–∏—Ñ': return { background: '#ffb700ff', color: 'black' };
      default: return { background: '#444', color: 'white' };
    }
  };

  return (
    <div className={styles.fullScreenContainer}>
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className={styles.topPanel}>
        <div className={styles.iconColumn}>
          {/* –°–ª–µ–≤–∞: 2 —Ä—è–¥–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ sheriff –∏ Don */}
          {[sheriff, Don].map((iconSrc, idx) => (
            <div key={idx} className={styles.row}>
              <div className={styles.icon}>
                <img src={iconSrc} alt="" className={styles.iconImage} />
              </div>
              <div className={styles.squares}>
                {squares.map((_, i) => (
                  <div key={i} className={styles.square}></div>
                ))}
              </div>
            </div>
          ))}
        </div>

        <div className={styles.centerInfo}>
          <div className={styles.tableTitle}>–°—Ç–æ–ª 1</div>
          <div className={styles.gameRound}>–ò–≥—Ä–∞ 1/13</div>
        </div>

        <div className={styles.iconColumn}>
          {/* –°–ø—Ä–∞–≤–∞: 2 —Ä—è–¥–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ Golos –∏ Strelba */}
          {[Golos, Strelba].map((iconSrc, idx) => (
            <div key={idx} className={styles.row}>
              <div className={styles.squares}>
                {squares.map((_, i) => (
                  <div key={i} className={styles.square}></div>
                ))}
              </div>
              <div className={styles.icon}>
                <img src={iconSrc} alt="" className={styles.iconImage} />
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ò–≥—Ä–æ–∫–∏ —Å–Ω–∏–∑—É */}
      <div className={styles.cardsSection}>
        <img src={logo} alt="Logo" className={styles.logo} />

        <div className={styles.cardsContainer}>
          {activePlayers.map((player) => {
            const roleStyle = getRoleColor(player.role);
            return (
              <div
                key={player.id}
                className={`${styles.playerCard} ${player.fouls > 0 ? styles.hasFouls : ''}`}
              >
                <img src={CCC_prew} alt="Player preview" className={styles.image} />
                <div className={styles.bottomSection}>
                  <div
                    className={styles.bottomBar}
                    style={{
                      backgroundColor: roleStyle.background,
                      color: roleStyle.color,
                    }}
                  >
                    <span>
                      <span className={styles.playerNumber}>{player.id}</span>
                      <span className={styles.separator}>/</span>
                      <span className={styles.playerName}>{player.name}</span>
                    </span>
                  </div>
                  <div className={styles.dots}>
                    <span></span><span></span><span></span><span></span>
                  </div>
                </div>
              </div>
            );
          })}

          {foldedPlayers.map((player) => {
            const roleStyle = getRoleColor(player.role);
            return (
              <div key={player.id} className={`${styles.playerCard} ${styles.folded}`}>
                <div className={styles.bottomSection}>
                  <div
                    className={styles.bottomBar}
                    style={{
                      backgroundColor: roleStyle.background,
                      color: roleStyle.color,
                    }}
                  >
                    <span>
                      <span className={styles.playerNumber}>{player.id}</span>
                      <span className={styles.separator}>/</span>
                      <span className={styles.playerName}>{player.name}</span>
                    </span>
                  </div>
                  <div className={styles.dots}>
                    <span></span><span></span><span></span><span></span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default GameWidget;